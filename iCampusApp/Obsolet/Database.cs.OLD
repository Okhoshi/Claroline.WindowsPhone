using System;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;
using System.Collections.ObjectModel;
using System.Windows.Data;
using System.Globalization;


namespace iCampusApp
{
    public class iCampusDC : DataContext
    {
        // Specify the connection string as a static, used in main page and app.xaml.
        public static string DBConnectionString = "Data Source=isostore:/iCampus.sdf";

        // Pass the connection string to the base class.
        public iCampusDC(string connectionString)
            : base(connectionString)
        {
        }

        // Specify a single table for the items.
        
        public Table<CoursItem> CoursItems;
        public Table<SectionItem> SectionItems;
    }

    #region Definition Table pour CoursItem
    [Table]
    public class CoursItem : INotifyPropertyChanged, INotifyPropertyChanging
    {
        // Define ID: private field, public property and database column.

        private int _CoursId;

        [Column(IsPrimaryKey = true, IsDbGenerated = true, DbType = "INT NOT NULL Identity", CanBeNull = false, AutoSync = AutoSync.OnInsert)]
        public int CoursId
        {
            get
            {
                return _CoursId;
            }
            set
            {
                if (_CoursId != value)
                {
                    NotifyPropertyChanging("CoursId");
                    _CoursId = value;
                    NotifyPropertyChanged("CoursId");
                }
            }
        }

        // Define item name: private field, public property and database column.

        private string _CoursName;

        [Column]
        public string CoursName
        {
            get
            {
                return _CoursName;
            }
            set
            {
                if (_CoursName != value)
                {
                    NotifyPropertyChanging("CoursName");
                    _CoursName = value;
                    NotifyPropertyChanged("CoursName");
                }
            }
        }

        // Define item name: private field, public property and database column.

        private string _CoursTag;

        [Column]
        public string CoursTag
        {
            get
            {
                return _CoursTag;
            }
            set
            {
                if (_CoursTag != value)
                {
                    NotifyPropertyChanging("CoursTag");
                    _CoursTag = value;
                    NotifyPropertyChanged("CoursTag");
                }
            }
        }

        // Define completion value: private field, public property and database column.

        private string _profResponsable;

        [Column]
        public string profResponsable
        {
            get
            {
                return _profResponsable;
            }
            set
            {
                if (_profResponsable != value)
                {
                    NotifyPropertyChanging("profResponsable");
                    _profResponsable = value;
                    NotifyPropertyChanged("profResposable");
                }
            }
        }

        // Define completion value: private field, public property and database column.

        private string _url;

        [Column]
        public string Url
        {
            get
            {
                return _url;
            }
            set
            {
                if (_url != value)
                {
                    NotifyPropertyChanging("Url");
                    _url = value;
                    NotifyPropertyChanged("Url");
                }
            }
        }

        // Define completion value: private field, public property and database column.

        private bool _status;

        [Column]
        public bool Status
        {
            get
            {
                return _status;
            }
            set
            {
                if (_status != value)
                {
                    NotifyPropertyChanging("Status");
                    _status = value;
                    NotifyPropertyChanged("Status");
                }
            }
        }

        // Version column aids update performance.

        [Column(IsVersion = true)]
        private Binary _version;

        public override bool Equals(object obj)
        {
            if (obj != null && obj.GetType() == typeof(CoursItem))
            {
                CoursItem Cou = obj as CoursItem;
                return (Cou._CoursTag == this._CoursTag);
            }
            return false;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        // Used to notify the page that a data context property changed

        private void NotifyPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region INotifyPropertyChanging Members

        public event PropertyChangingEventHandler PropertyChanging;

        // Used to notify the data context that a data context property is about to change

        private void NotifyPropertyChanging(string propertyName)
        {
            if (PropertyChanging != null)
            {
                PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }

        #endregion
    }

    #endregion

    #region Definition Table pour SectionItem
    [Table]
    public class SectionItem : INotifyPropertyChanged, INotifyPropertyChanging
    {
        // Define ID: private field, public property and database column.

        private int _SectionId;

        [Column(IsPrimaryKey = true, IsDbGenerated = true, DbType = "INT NOT NULL Identity", CanBeNull = false, AutoSync = AutoSync.OnInsert)]
        public int SectionId
        {
            get
            {
                return _SectionId;
            }
            set
            {
                if (_SectionId != value)
                {
                    NotifyPropertyChanging("SectionId");
                    _SectionId = value;
                    NotifyPropertyChanged("SectionId");
                }
            }
        }

        // Define item name: private field, public property and database column.

        private string _SectionName;

        [Column]
        public string SectionName
        {
            get
            {
                return _SectionName;
            }
            set
            {
                if (_SectionName != value)
                {
                    NotifyPropertyChanging("SectionName");
                    _SectionName = value;
                    NotifyPropertyChanged("SectionName");
                }
            }
        }

        // Define item name: private field, public property and database column.

        private string _SectionCours;

        [Column]
        public string SectionCours
        {
            get
            {
                return _SectionCours;
            }
            set
            {
                if (_SectionCours != value)
                {
                    NotifyPropertyChanging("SectionCours");
                    _SectionCours = value;
                    NotifyPropertyChanged("SectionCours");
                }
            }
        }

        // Define completion value: private field, public property and database column.

        private bool _status;

        [Column]
        public bool Status
        {
            get
            {
                return _status;
            }
            set
            {
                if (_status != value)
                {
                    NotifyPropertyChanging("Status");
                    _status = value;
                    NotifyPropertyChanged("Status");
                }
            }
        }

        // Define completion value: private field, public property and database column.

        private string _url;

        [Column]
        public string Url
        {
            get
            {
                return _url;
            }
            set
            {
                if (_url != value)
                {
                    NotifyPropertyChanging("Url");
                    _url = value;
                    NotifyPropertyChanged("Url");
                }
            }
        }

        // Define completion value: private field, public property and database column.

        private string _SecId;

        [Column]
        public string SecId
        {
            get
            {
                return _SecId;
            }
            set
            {
                if (_SecId != value)
                {
                    NotifyPropertyChanging("SecId");
                    _SecId = value;
                    NotifyPropertyChanged("SecId");
                }
            }
        }
        // Version column aids update performance.

        [Column(IsVersion = true)]
        private Binary _version;

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        // Used to notify the page that a data context property changed

        private void NotifyPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region INotifyPropertyChanging Members

        public event PropertyChangingEventHandler PropertyChanging;

        // Used to notify the data context that a data context property is about to change

        private void NotifyPropertyChanging(string propertyName)
        {
            if (PropertyChanging != null)
            {
                PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }

        #endregion
    }

    #endregion

    public class StatusConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            var ret =  ((bool) value)? App.Current.Resources["PhoneAccentBrush"] : App.Current.Resources["PhoneForegroundBrush"];
            return ret;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return (value as SolidColorBrush == App.Current.Resources["PhoneAccentBrush"]);
        }
    }

}


public class SectionCours : INotifyPropertyChanged, INotifyPropertyChanging
      {
          // Define ID: private field, public property and database column.

          private int _Id;

          [Column(IsPrimaryKey = true, IsDbGenerated = true, DbType = "INT NOT NULL Identity", CanBeNull = false, AutoSync = AutoSync.OnInsert)]
          public int Id
          {
              get
              {
                  return _Id;
              }
              set
              {
                  if (_Id != value)
                  {
                      NotifyPropertyChanging("Id");
                      _Id = value;
                      NotifyPropertyChanged("Id");
                  }
              }
          }

          // Define item name: private field, public property and database column.

          private string _SectionName;

          [Column]
          public string SectionName
          {
              get
              {
                  return _SectionName;
              }
              set
              {
                  if (_SectionName != value)
                  {
                      NotifyPropertyChanging("SectionName");
                      _SectionName = value;
                      NotifyPropertyChanged("SectionName");
                  }
              }
          }

          // Internal column for the associated ToDoCategory ID value

          [Column]
          internal int _coursId;

          // Entity reference, to identify the ToDoCategory "storage" table

          private EntityRef<Cours> _cours;

          // Association, to describe the relationship between this key and that "storage" table

          [Association(Storage = "_coursId", ThisKey = "_coursId", OtherKey = "Id", IsForeignKey = true)]
          public Cours Cours
          {
              get { return _cours.Entity; }
              set
              {
                  NotifyPropertyChanging("Cours");
                  _cours.Entity = value;

                  if (value != null)
                  {
                      _coursId = value.Id;
                  }

                  NotifyPropertyChanging("Cours");
              }
          }
  


          // Define completion value: private field, public property and database column.

          private bool _status;

          [Column]
          public bool Status
          {
              get
              {
                  return _status;
              }
              set
              {
                  if (_status != value)
                  {
                      NotifyPropertyChanging("Status");
                      _status = value;
                      NotifyPropertyChanged("Status");
                  }
              }
          }

          // Define completion value: private field, public property and database column.

          private string _url;

          [Column]
          public string Url
          {
              get
              {
                  return _url;
              }
              set
              {
                  if (_url != value)
                  {
                      NotifyPropertyChanging("Url");
                      _url = value;
                      NotifyPropertyChanged("Url");
                  }
              }
          }

          // Define completion value: private field, public property and database column.

          private string _SecId;

          [Column]
          public string SecId
          {
              get
              {
                  return _SecId;
              }
              set
              {
                  if (_SecId != value)
                  {
                      NotifyPropertyChanging("SecId");
                      _SecId = value;
                      NotifyPropertyChanged("SecId");
                  }
              }
          }


          // Version column aids update performance.

          [Column(IsVersion = true)]
          private Binary _version;

          #region INotifyPropertyChanged Members

          public event PropertyChangedEventHandler PropertyChanged;

          // Used to notify that a property changed

          private void NotifyPropertyChanged(string propertyName)
          {
              if (PropertyChanged != null)
              {
                  PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
              }
          }

          #endregion

          #region INotifyPropertyChanging Members

          public event PropertyChangingEventHandler PropertyChanging;

          // Used to notify that a property is about to change

          private void NotifyPropertyChanging(string propertyName)
          {
              if (PropertyChanging != null)
              {
                  PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
              }
          }

          #endregion

          public override bool Equals(object obj)
          {
              if (obj != null && obj.GetType() == typeof(SectionCours))
              {
                  SectionCours Sec = obj as SectionCours;
                  return (Sec.SecId == this.SecId);
              }
              return false;
          }
      }